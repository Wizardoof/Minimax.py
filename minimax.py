import time  # Solo esta biblioteca es necesaria

class Laberinto:
    def __init__(self, filas=8, columnas=8):
        #__init__ inicializador Este m√©todo se llama AUTOM√ÅTICAMENTE al crear un objeto
        self.filas, self.columnas = filas, columnas #self es la identidad de cada fila y columna
        self.tablero = [['.' for _ in range(columnas)] for _ in range(filas)]
        self.gato = (0, 0)           # Gato arriba-izquierda
        self.raton = (filas-1, columnas-1)  # Rat√≥n abajo-derecha
        self.salida = (0, columnas-1)  # Salida arriba-derecha (posici√≥n estrat√©gica)
        self.turno = 0
        self.max_turnos = 25         # pocos turnos juegos m√°s r√°pidos
        self.actualizar_tablero()
    
    def actualizar_tablero(self):
        #Dibuja el tablero con las posiciones actuales
        # Limpiar tablero - Asegurarse de que tenga el tama√±o correcto
        for i in range(self.filas):
            for j in range(self.columnas):
                self.tablero[i][j] = '_'
        
        # Colocar la salida primero (para que no se sobreescriba)
        self.tablero[self.salida[0]][self.salida[1]] = 'üö™'
        
        # Colocar jugadores (verificar que est√©n dentro de los nuevos l√≠mites)
        if 0 <= self.gato[0] < self.filas and 0 <= self.gato[1] < self.columnas:
            self.tablero[self.gato[0]][self.gato[1]] = 'üê±'
        else:
            # Reposicionar gato si est√° fuera de l√≠mites
            self.gato = (0, 0)
            self.tablero[0][0] = 'üê±'
        
        if 0 <= self.raton[0] < self.filas and 0 <= self.raton[1] < self.columnas:
            self.tablero[self.raton[0]][self.raton[1]] = 'üê≠'
        else:
            # Reposicionar rat√≥n si est√° fuera de l√≠mites
            self.raton = (self.filas-1, self.columnas-1)
            self.tablero[self.filas-1][self.columnas-1] = 'üê≠'
    
    def movimiento_valido(self, pos, jugador):
        #Verifica si un movimiento es permitido
        #pos=posicion, col=columna
        fila, col = pos
        
        # NUEVO: El rat√≥n puede escapar por la salida (incluso si est√° fuera de l√≠mites)
        if jugador == 'R' and pos == self.salida:
            return True  # ‚Üê Movimiento especial de escape
        
        # 1. No salir del tablero (caso normal)
        if not (0 <= fila < self.filas and 0 <= col < self.columnas):
            return False
        
        # 2. Gato puede atrapar rat√≥n
        if jugador == 'G' and pos == self.raton:
            return True
        
        # 3. Rat√≥n no puede moverse al gato
        if jugador == 'R' and pos == self.gato:
            return False
        
        return True
    
    def movimientos_posibles(self, jugador):
        #Lista de movimientos v√°lidos (4 direcciones)
        pos_actual = self.gato if jugador == 'G' else self.raton
        direcciones = [(-1, 0), (1, 0), (0, -1), (0, 1)]  # Arriba, abajo, izquierda, derecha
        
        movimientos_validos = []
        for d in direcciones:
            nueva_pos = (pos_actual[0] + d[0], pos_actual[1] + d[1])
            if self.movimiento_valido(nueva_pos, jugador):
                movimientos_validos.append(nueva_pos)
        
        # NUEVO: El rat√≥n siempre puede intentar escapar si est√° junto a la salida
        if jugador == 'R':
            # Verificar si est√° adyacente a la salida usando distancia Manhattan
            dist_salida = abs(pos_actual[0] - self.salida[0]) + abs(pos_actual[1] - self.salida[1])
            if dist_salida == 1:  # Est√° justo al lado de la salida
                movimientos_validos.append(self.salida)  # ‚Üê A√±adir movimiento de escape
        
        return movimientos_validos
    
    def mover(self, jugador, nueva_pos):
        #Mueve al jugador y verifica si alguien gana
        if jugador == 'G':
            self.gato = nueva_pos
            if self.gato == self.raton:  # Gato atrapa rat√≥n
                return 'GATO_GANA'
        else:
            # NUEVO: Verificar si el rat√≥n escapa por la salida (victoria principal)
            if nueva_pos == self.salida:
                return 'RATON_LLEGA_SALIDA'  # ‚Üê Victoria por llegar a salida
            
            self.raton = nueva_pos
            self.turno += 1
            # NUEVO: Verificar si sobrevive todos los turnos (victoria secundaria)
            if self.turno >= self.max_turnos:
                return 'RATON_SOBREVIVE'  # ‚Üê Victoria por supervivencia
        
        self.actualizar_tablero()
        return 'CONTINUA'
    
    def evaluar_estado(self):
        #distancia entre gato y rat√≥n 
       
        if self.gato == self.raton:
            return -1000  # Gato gana (muy malo para rat√≥n)
        if self.raton == self.salida:
            return 1000   # Rat√≥n gana llegando a salida (m√°xima prioridad)
        if self.turno >= self.max_turnos:
            return 800    # Rat√≥n gana por supervivencia (menor prioridad)
        
        # C√°lculo de distancias usando Manhattan (suma de diferencias en X e Y)
        distancia_gato_raton = abs(self.gato[0] - self.raton[0]) + abs(self.gato[1] - self.raton[1])
        distancia_raton_salida = abs(self.raton[0] - self.salida[0]) + abs(self.raton[1] - self.salida[1])
        
        # Estrategia: gato quiere minimizar distancia al rat√≥n y maximizar distancia del rat√≥n a salida
        puntuacion = -distancia_gato_raton * 3  # Base prioritaria (m√°s negativo es mejor para gato)
        puntuacion += distancia_raton_salida * 2  # Bonus: rat√≥n lejos de salida = mejor para gato
        
        return puntuacion
        
class Juego:
    # Constantes de la clase (fuera de m√©todos)
    VALOR_INICIAL_MIN = -1000000  # N√∫mero muy negativo para no usar inf y que tarde mucho
    VALOR_INICIAL_MAX = 1000000   # N√∫mero muy positivo same
    
    def __init__(self, laberinto):
        self.laberinto = laberinto
        self.profundidad_gato = 4  # Gato ve 4 movimientos adelante
        self.profundidad_raton = 2  # Rat√≥n mantiene 2 inicial 
        self.umbral_evolucion = 5   # Turnos para evolucionar
        self.turnos_sobrevividos = 0
        self.nivel_evolucion = 0    # Contador de evoluciones
    
    def evolucionar_inteligencia(self):
        #Hace al rat√≥n m√°s inteligente cada X turnos sobrevividos
        self.turnos_sobrevividos += 1
        
        # Verificar si es tiempo de evolucionar
        if (self.turnos_sobrevividos >= self.umbral_evolucion and 
            self.profundidad_raton < 5):  # L√≠mite m√°ximo de inteligencia
            
            self.nivel_evolucion += 1
            vieja_profundidad = self.profundidad_raton
            self.profundidad_raton += 1
            self.turnos_sobrevividos = 0  # Resetear contador
            
            mensajes = [
                "üê≠ ¬°El rat√≥n est√° despertando su inteligencia!",
                "üê≠ ¬°El rat√≥n se est√° volviendo m√°s inteligente!",
                "üê≠ ¬°El rat√≥n es ahora un maestro del escape!"
            ]
            
            msg_index = min(self.nivel_evolucion - 1, len(mensajes) - 1)
            print(mensajes[msg_index])
            print(f"   Nivel de pensamiento: {vieja_profundidad} ‚Üí {self.profundidad_raton} movimientos")
    
    # ==================== M√âTODOS PARA MINIMAX CON ESTADOS SIMULADOS ====================
    
    def evaluar_estado_simulado(self, estado):
        
        if estado['gato'] == estado['raton']:
            return -1000
        if estado['raton'] == estado['salida']:
            return 1000   # M√°xima prioridad: llegar a salida
        if estado['turno'] >= estado['max_turnos']:
            return 800    # Menor prioridad: sobrevivir turnos
        
        # C√°lculo de distancias Manhattan para la heur√≠stica
        dist_gato_raton = abs(estado['gato'][0] - estado['raton'][0]) + abs(estado['gato'][1] - estado['raton'][1])
        dist_raton_salida = abs(estado['raton'][0] - estado['salida'][0]) + abs(estado['raton'][1] - estado['salida'][1])
        
        return -dist_gato_raton * 3 + dist_raton_salida * 2
    
    def movimientos_posibles_simulados(self, estado, jugador):
        """Versi√≥n simplificada de movimientos_posibles para estados simulados"""
        pos_actual = estado['gato'] if jugador == 'G' else estado['raton']
        direcciones = [(-1, 0), (1, 0), (0, -1), (0, 1)]  # Arriba, abajo, izquierda, derecha
        
        movimientos = []
        for d in direcciones:
            nueva_pos = (pos_actual[0] + d[0], pos_actual[1] + d[1])
            if self.movimiento_valido_simulado(estado, nueva_pos, jugador):
                movimientos.append(nueva_pos)
        
        # El rat√≥n puede escapar si est√° junto a la salida (distancia Manhattan = 1)
        if jugador == 'R':
            dist_salida = abs(pos_actual[0] - estado['salida'][0]) + abs(pos_actual[1] - estado['salida'][1])
            if dist_salida == 1 and estado['salida'] not in movimientos:
                movimientos.append(estado['salida'])
        
        return movimientos
    
    def movimiento_valido_simulado(self, estado, pos, jugador):
        """Versi√≥n simplificada de movimiento_valido para estados simulados"""
        fila, col = pos
        
        # El rat√≥n puede escapar por la salida
        if jugador == 'R' and pos == estado['salida']:
            return True
        
        # No salir del tablero
        if not (0 <= fila < estado['filas'] and 0 <= col < estado['columnas']):
            return False
        
        # Gato puede atrapar rat√≥n
        if jugador == 'G' and pos == estado['raton']:
            return True
        
        # Rat√≥n no puede moverse al gato
        if jugador == 'R' and pos == estado['gato']:
            return False
        
        return True
    
    def simular_movimiento(self, estado, jugador, movimiento):
        #Crea un nuevo estado simulado despu√©s de un movimiento (usa diccionarios)
        nuevo_estado = estado.copy()  # Copiamos el diccionario (m√°s eficiente que deepcopy)
        
        if jugador == 'G':
            nuevo_estado['gato'] = movimiento
        else:
            nuevo_estado['raton'] = movimiento
            nuevo_estado['turno'] += 1  # Solo el rat√≥n consume turnos
        
        return nuevo_estado
    
    def minimax(self, estado, profundidad, es_maximizador):
        #Algoritmo Minimax con estados simulados (diccionarios)
        # Estados terminales del juego
        if estado['gato'] == estado['raton']:
            return -1000  # Gato gana
        if estado['raton'] == estado['salida']:
            return 1000   # Rat√≥n gana llegando a salida
        if estado['turno'] >= estado['max_turnos']:
            return 800    # Rat√≥n gana por supervivencia
        
        # L√≠mite de profundidad alcanzado, usar evaluaci√≥n heur√≠stica
        if profundidad == 0:
            return self.evaluar_estado_simulado(estado)
        
        mejor_valor = self.VALOR_INICIAL_MIN if es_maximizador else self.VALOR_INICIAL_MAX
        
        jugador = 'R' if es_maximizador else 'G'
        for movimiento in self.movimientos_posibles_simulados(estado, jugador):
            nuevo_estado = self.simular_movimiento(estado, jugador, movimiento)
            
            valor = self.minimax(nuevo_estado, profundidad-1, not es_maximizador)
            
            if es_maximizador:
                mejor_valor = max(mejor_valor, valor)
            else:
                mejor_valor = min(mejor_valor, valor)
        
        return mejor_valor
    
    def mejor_movimiento(self, jugador):
        #Encuentra el mejor movimiento usando Minimax
        movimientos = self.laberinto.movimientos_posibles(jugador)
        if not movimientos:
            return self.laberinto.gato if jugador == 'G' else self.laberinto.raton
        
        # Crear estado inicial como diccionario para la simulaci√≥n Minimax
        estado_inicial = {
            'gato': self.laberinto.gato,
            'raton': self.laberinto.raton,
            'salida': self.laberinto.salida,
            'turno': self.laberinto.turno,
            'max_turnos': self.laberinto.max_turnos,
            'filas': self.laberinto.filas,
            'columnas': self.laberinto.columnas
        }
        
        if jugador == 'R':
            # Para rat√≥n: usar profundidad_actual (evoluciona)
            self.evolucionar_inteligencia()
            profundidad = self.profundidad_raton - 1
            es_maximizador = False  # Siguiente turno es del gato (minimizador)
            mejor_valor = self.VALOR_INICIAL_MIN
        else:
            # Para gato: usar profundidad_base (constante)
            profundidad = self.profundidad_gato - 1
            es_maximizador = True   # Siguiente turno es del rat√≥n (maximizador)
            mejor_valor = self.VALOR_INICIAL_MAX
        
        mejor_mov = movimientos[0]  # Movimiento por defecto
        
        # Evaluar cada movimiento posible con Minimax
        for movimiento in movimientos:
            nuevo_estado = self.simular_movimiento(estado_inicial, jugador, movimiento)
            valor = self.minimax(nuevo_estado, profundidad, es_maximizador)
            
            # Rat√≥n busca maximizar, Gato busca minimizar
            if (jugador == 'R' and valor > mejor_valor) or (jugador == 'G' and valor < mejor_valor):
                mejor_valor = valor
                mejor_mov = movimiento
        
        return mejor_mov
    
    def jugar_turno_ia_vs_ia(self):
        #Un turno completo: rat√≥n y luego gato (ambos IA)
        # Rat√≥n se mueve
        resultado = self.laberinto.mover('R', self.mejor_movimiento('R'))
        if resultado != 'CONTINUA':
            return resultado
        
        # Gato se mueve
        return self.laberinto.mover('G', self.mejor_movimiento('G'))

# ==================== FUNCIONES DE INTERFAZ ====================

def mostrar_tablero_simple(laberinto):
    #Muestra el tablero de forma simple
    print(f"Turno: {laberinto.turno}/{laberinto.max_turnos}")
    print(f"Rat√≥n üê≠ busca llegar a üö™ (salida)")
    for fila in laberinto.tablero:
        print(' '.join(fila))
    
def obtener_movimiento_jugador(laberinto, jugador):
    #Pide movimiento al jugador humano
    print(f"\nTurno del {'Gato üê±' if jugador == 'G' else 'Rat√≥n üê≠'}")
    print("W=Arriba, A=Izquierda, S=Abajo, D=Derecha")
    print(f"Objetivo: {'Atrapar al rat√≥n' if jugador == 'G' else 'Llegar a üö™'}")
    

    movimientos = {'W': (-1, 0), 'A': (0, -1), 'S': (1, 0), 'D': (0, 1)}
    
    while True:
        tecla = input("Movimiento (W/A/S/D): ").upper() #convierte si el input es minuscula a mayuscula automaticamente
        
        if tecla in movimientos:
            pos_actual = laberinto.gato if jugador == 'G' else laberinto.raton
            movimiento = movimientos[tecla]
            nueva_pos = (pos_actual[0] + movimiento[0], pos_actual[1] + movimiento[1])
            
            if laberinto.movimiento_valido(nueva_pos, jugador):
                return nueva_pos
            else:
                print("Movimiento inv√°lido. Intente otra direcci√≥n.")
        else:
            print("Tecla no v√°lida. Use W, A, S o D.")

def simulacion_automatica():
    #Modo: IA vs IA 
    lab = Laberinto(8, 8)
    juego = Juego(lab)
    
    print("=== IA vs IA ===")
    print("üê± Gato  vs üê≠ Rat√≥n")
    print("Objetivo: Rat√≥n debe llegar a üö™ (salida)")
    while True:
        mostrar_tablero_simple(lab)
        time.sleep(1)
        
        resultado = juego.jugar_turno_ia_vs_ia()
        if resultado != 'CONTINUA':
            mostrar_tablero_simple(lab)
            if resultado == 'GATO_GANA':
                print("¬°Gato gana! Atrap√≥ al rat√≥n üê±")
            elif resultado == 'RATON_LLEGA_SALIDA':
                print("¬°Rat√≥n gana! Lleg√≥ a la salida üö™")
            else:
                print("¬°Rat√≥n gana! Sobrevivi√≥ todos los turnos ‚è∞")
            break

def jugar_como_raton():
    #Modo: Jugador como rat√≥n vs IA gato
    lab = Laberinto(8, 8)
    juego = Juego(lab)
    
    print("=== T√∫ como Rat√≥n vs IA Gato ===")
    print("üê≠ T√∫ vs üê± IA")
    print("Objetivo: Llegar a üö™ antes de que te atrapen")
    while True:
        mostrar_tablero_simple(lab)
        
        # Jugador (rat√≥n)
        mov_raton = obtener_movimiento_jugador(lab, 'R')
        resultado = lab.mover('R', mov_raton)
        if resultado != 'CONTINUA':
            mostrar_tablero_simple(lab)
            if resultado == 'RATON_LLEGA_SALIDA':
                print("¬°Ganaste! Llegaste a la salida üö™")
            elif resultado == 'RATON_SOBREVIVE':
                print("¬°Ganaste! Sobreviviste todos los turnos ‚è∞")
            else:
                print("¬°Perdiste! El gato te atrap√≥ üê±")
            break
        
        # IA (gato) - ahora m√°s inteligente
        mov_gato = juego.mejor_movimiento('G')
        resultado = lab.mover('G', mov_gato)
        if resultado != 'CONTINUA':
            mostrar_tablero_simple(lab)
            print("¬°Perdiste! El gato te atrap√≥ üê±")
            break

def jugar_como_gato():
    #Modo: Jugador como gato vs IA rat√≥n
    lab = Laberinto(8, 8)
    juego = Juego(lab)
    
    print("=== T√∫ como Gato vs IA Rat√≥n ===")
    print("üê± T√∫ vs üê≠ IA")
    print("Objetivo: Atrapar al rat√≥n antes de que escape")
    while True:
        mostrar_tablero_simple(lab)
        
        # IA (rat√≥n) - evoluciona en inteligencia
        mov_raton = juego.mejor_movimiento('R')
        resultado = lab.mover('R', mov_raton)
        if resultado != 'CONTINUA':
            mostrar_tablero_simple(lab)
            if resultado == 'RATON_LLEGA_SALIDA':
                print("¬°Perdiste! El rat√≥n lleg√≥ a la salida üö™")
            else:
                print("¬°Perdiste! El rat√≥n sobrevivi√≥ todos los turnos ‚è∞")
            break
        
        # Jugador (gato)
        mov_gato = obtener_movimiento_jugador(lab, 'G')
        resultado = lab.mover('G', mov_gato)
        if resultado != 'CONTINUA':
            mostrar_tablero_simple(lab)
            print("¬°Ganaste! Atrapaste al rat√≥n üê±")
            break

def menu_principal():
    #Men√∫ para elegir modo de juego
    while True:
        print("=== LABERINTO GATO Y RAT√ìN ===")
        print("üéØ Objetivo principal: El rat√≥n debe llegar a la salida üö™")
        print("‚è∞ Objetivo secundario: Sobrevivir 20 turnos")
        print("üê± El gato debe atrapar al rat√≥n antes de que escape")
        print("1. Ver IA vs IA (Gato inteligente vs Rat√≥n evolutivo)")
        print("2. Jugar como Rat√≥n (vs IA Gato inteligente)")
        print("3. Jugar como Gato (vs IA Rat√≥n evolutivo)")
        print("4. Salir")
        
        opcion = input("Elige (1-4): ")
        
        if opcion == '1':
            simulacion_automatica()
        elif opcion == '2':
            jugar_como_raton()
        elif opcion == '3':
            jugar_como_gato()
        elif opcion == '4':
            print("¬°Gracias por jugar!")
            break
        else:
            print("Opci√≥n no v√°lida vuelva a intentar")

# Ejecutar el juego
if __name__ == "__main__":
    menu_principal()